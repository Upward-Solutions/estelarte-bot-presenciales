name: CI/CD Workflow

on:
  push:
    branches:
      - master

jobs:
  e2e_test:
    runs-on: ubuntu-24.04

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd "pg_isready -U postgres -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -U postgres -d testdb; do
            echo "Esperando a que la base de datos estÃ© lista..."
            sleep 1
          done
          echo "Base de datos lista."

      - name: Reset Database
        run: |
          psql -h localhost -U postgres -d testdb -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
        env:
          PGPASSWORD: postgres

      - name: Set up Database URL
        run: echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/testdb" > .env

      - name: Run Tests
        run: |
          source .venv/bin/activate
          pytest --disable-warnings

  build:
    needs: e2e_test
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 571621977540.dkr.ecr.us-east-1.amazonaws.com

      - name: Build Docker Image
        run: |
          docker build -t flask-app:latest .

      - name: Tag Docker Image
        run: |
          docker tag flask-app:latest 571621977540.dkr.ecr.us-east-1.amazonaws.com/upward/proyectos:bot-presenciales-latest

      - name: Push Docker Image to ECR
        run: |
          docker push 571621977540.dkr.ecr.us-east-1.amazonaws.com/upward/proyectos:bot-presenciales-latest

  deploy:
    needs: build
    runs-on: ubuntu-24.04

    steps:

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: <your-region>

      - name: Deploy to EC2 with SSM
        run: |
          aws ssm send-command \
            --targets "Key=instanceIds,Values=<instance-id>" \
            --document-name "AWS-RunShellScript" \
            --comment "Update Flask App" \
            --parameters '{"commands":["aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 571621977540.dkr.ecr.us-east-1.amazonaws.com","docker pull 571621977540.dkr.ecr.us-east-1.amazonaws.com/flask-app:latest","docker stop flask-app || true","docker rm flask-app || true","docker run -d -p 5000:5000 --name flask-app 571621977540.dkr.ecr.us-east-1.amazonaws.com/flask-app:latest"]}' \
            --region us-east-1